// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id           String     @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   name         String
//   email        String     @unique
//   password     String
//   mobileNumber Int        @unique
//   responses    Response[]
//   results      Result[]
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }

// model Admin {
//   id               String          @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   name             String
//   email            String          @unique
//   mobileNumber     Int             @unique
//   password         String
//   createdExams     Exam[]          @relation("AdminCreatedExam")
//   updatedExams     Exam[]          @relation("AdminUpdatedExam")
//   createdQuestions Question[]
//   ExamQuestions    ExamQuestions[]
//   ExamQuestions    ExamQuestions[]
// }

// model Category {
//   id        String     @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   name      String     @unique
//   questions Question[]
//   Topic     Topic[]
// }

// model Topic {
//   id           String   @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   name         String
//   categoryType String
//   category     Category @relation(fields: [categoryType], references: [id])
// }

// model Question {
//   id              String          @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   text            String
//   categoryId      String
//   category        Category        @relation(fields: [categoryId], references: [id])
//   options         Option[]
//   useFreq         Int             @default(0)
//   rightFreq       Int             @default(0)
//   wrongFreq       Int             @default(0)
//   difficultyLevel DifficultyLevel @default(MEDIUM)
//   correctOption   String
//   createdAt       DateTime        @default(now())
//   updatedAt       DateTime        @updatedAt
//   Admin           Admin?          @relation(fields: [adminId], references: [id])
//   adminId         String?
//   Response        Response[]
// }

// model Option {
//   id         String   @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   text       String
//   questionId String
//   question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
//   isCorrect  Boolean  @default(false)
// }

// model Exam {
//   id               String        @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   title            String
//   description      String
//   examCode         String        @unique
//   duration         Int
//   status           String
//   // questionCount   Int counting the number of record
//   ExamQuestionsId  String
//   ExamQuestions    ExamQuestions @relation(fields: [ExamQuestionsId], references: [id])
//   createdByAdminId String
//   updatedByAdminId String
//   createdBy        Admin         @relation("AdminCreatedExam", fields: [createdByAdminId], references: [id])
//   updatedBy        Admin         @relation("AdminUpdatedExam", fields: [updatedByAdminId], references: [id])
//   createdAt        DateTime      @default(now())
//   updatedAt        DateTime      @updatedAt

//   // copiedFrom    String? exam copy functianality
// }

// model ExamQuestions {
//   id               String     @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   questionIds      String[]
//   responses        Response[]
//   results          Result[]
//   createdByAdminId String
//   updatedByAdminId String
//   createdBy        Admin      @relation("AdminCreatedExam", fields: [createdByAdminId], references: [id])
//   updatedBy        Admin      @relation("AdminUpdatedExam", fields: [updatedByAdminId], references: [id])
//   createdAt        DateTime   @default(now())
//   updatedAt        DateTime   @updatedAt
// }

// model Response {
//   id              String         @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   userId          String
//   user            User           @relation(fields: [userId], references: [id])
//   examId          String
//   exam            Exam           @relation(fields: [examId], references: [id])
//   questionId      String
//   question        Question       @relation(fields: [questionId], references: [id])
//   selectedOption  Int
//   isCorrect       Boolean
//   createdAt       DateTime       @default(now())
//   ExamQuestions   ExamQuestions? @relation(fields: [examQuestionsId], references: [id])
//   examQuestionsId String?        @db.Char(8)
// }

// model Result {
//   id              String         @id @default(dbgenerated("LPAD((FLOOR(RANDOM() * 100000000))::TEXT, 8, '0')")) @db.Char(8)
//   userId          String
//   user            User           @relation(fields: [userId], references: [id])
//   examId          String
//   exam            Exam           @relation(fields: [examId], references: [id])
//   score           Int
//   total           Int
//   createdAt       DateTime       @default(now())
//   ExamQuestions   ExamQuestions? @relation(fields: [examQuestionsId], references: [id])
//   examQuestionsId String?        @db.Char(8)
// }

// enum DifficultyLevel {
//   EASY
//   MEDIUM
//   DIFFICULT
//   VERY_DIFFICULT
//   TRICKY
// }

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Participant {
//   id           Int        @id @default(autoincrement())
//   name         String
//   email        String     @unique
//   password     String
//   mobileNumber String        @unique
//   responses    Response[]
//   results      Result[]
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }

// model User {
//   id           Int           @id @default(autoincrement())
//   name         String
//   email        String        @unique
//   mobileNumber String        @unique
//   password     String
//   createdExams Exam[]        @relation("AdminCreatedExam")
//   updatedExams Exam[]        @relation("AdminUpdatedExam")
//   questions    Question[] // Directly related to questions
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @default(now())
//   IntResponse  IntResponse[]
//   Category     Category[]
//   Topic        Topic[]
// }

// model Category {
//   id        Int        @id @default(autoincrement())
//   name      String     @unique
//   adminId   Int?
//   admin     User?      @relation(fields: [adminId], references: [id])
//   questions Question[]
//   topics    Topic[]
// }

// model Topic {
//   id         Int        @id @default(autoincrement())
//   name       String
//   category   Category   @relation(fields: [categoryId], references: [id])
//   adminId    Int?
//   admin      User?      @relation(fields: [adminId], references: [id])
//   categoryId Int
//   Question   Question[]
// }

// model Question {
//   id                Int                @id @default(autoincrement())
//   text              String
//   categoryId        Int
//   category          Category           @relation(fields: [categoryId], references: [id])
//   topicId           Int
//   topic             Topic              @relation(fields: [topicId], references: [id])
//   options           Option[]
//   difficulty        Difficulty         @default(MEDIUM)
//   correctOption     Int
//   createdAt         DateTime           @default(now())
//   updatedAt         DateTime           @updatedAt
//   adminId           Int?
//   admin             User?              @relation(fields: [adminId], references: [id])
//   responses         Response[]
//   Exam              Exam?              @relation(fields: [examId], references: [id])
//   examId            Int?
//   updatedBy         Int?
//   QuestionFrequency QuestionFrequency?
//   IntResponse       IntResponse[]
//   visibility        Boolean            @default(true)
// }

// model Option {
//   id         Int      @id @default(autoincrement())
//   text       String
//   question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
//   questionId Int
//   isCorrect  Boolean  @default(false)
// }

// model QuestionFrequency {
//   id         Int      @id @default(autoincrement())
//   question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
//   questionId Int      @unique
//   useFreq    Int      @default(0)
//   rightFreq  Int      @default(0)
//   wrongFreq  Int      @default(0)
// }

// model Exam {
//   id               Int           @id @default(autoincrement())
//   title            String
//   description      String
//   examCode         String        @unique
//   duration         Int
//   status           String
//   questions        Question[] // Direct Many-to-Many relation
//   createdBy        User          @relation("AdminCreatedExam", fields: [createdByAdminId], references: [id])
//   updatedBy        User          @relation("AdminUpdatedExam", fields: [updatedByAdminId], references: [id])
//   createdByAdminId Int
//   updatedByAdminId Int
//   // examType    String? ["MCQ", "Interactive"]
//   createdAt        DateTime      @default(now())
//   updatedAt        DateTime      @updatedAt
//   Response         Response[]
//   Result           Result[]
//   IntResponse      IntResponse[]
//   visibility       Boolean @default(true)
// }

// model Response {
//   id             Int         @id @default(autoincrement())
//   user           Participant @relation(fields: [userId], references: [id])
//   userId         Int
//   exam           Exam        @relation(fields: [examId], references: [id])
//   examId         Int
//   question       Question    @relation(fields: [questionId], references: [id])
//   questionId     Int
//   selectedOption Int
//   isCorrect      Boolean
//   createdAt      DateTime    @default(now())
// }

// // interactive exam table 
// model IntResponse {
//   id         Int      @id @default(autoincrement())
//   examId     Int
//   questionId Int
//   userId     Int
//   text       String
//   exam       Exam     @relation(fields: [examId], references: [id])
//   user       User     @relation(fields: [userId], references: [id])
//   question   Question @relation(fields: [questionId], references: [id])
// }

// model Result {
//   id        Int         @id @default(autoincrement())
//   user      Participant @relation(fields: [userId], references: [id])
//   userId    Int
//   exam      Exam        @relation(fields: [examId], references: [id])
//   examId    Int
//   score     Int
//   total     Int
//   createdAt DateTime    @default(now())
// }

// enum Difficulty {
//   EASY
//   MEDIUM
//   HARD
//   VERY_HARD
//   TRICKY
// }

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  VERY_HARD
  TRICKY
}

enum RoleEnum {
  SuperAdmin
  Admin
  SuperUser
  User
}

enum ExamStatus {
  Scheduled
  Active
  Inactive
  Completed
}

enum ParticipantStatus {
  NotStarted
  InProgress
  Completed
}

model Participant {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  mobileNumber     String             @unique
  active           Boolean            @default(true)
  organizationId   Int
  organization     Organization       @relation(fields: [organizationId], references: [id])
  createdById      Int?
  createdBy        User?              @relation(fields: [createdById], references: [id])
  updatedById      Int?
  responses        Response[]
  results          Result[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  approved         Boolean            @default(false)
  visibility       Boolean            @default(true)
  GroupParticipant GroupParticipant[]
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  mobileNumber     String             @unique
  password         String
  role             RoleEnum
  organizationId   Int?
  createdById      Int?
  active           Boolean            @default(true)
  createdBy        User?              @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers     User[]             @relation("CreatedUsers")
  createdExams     Exam[]             @relation("AdminCreatedExam")
  updatedExams     Exam[]             @relation("AdminUpdatedExam")
  questions        Question[]
  IntResponse      IntResponse[]
  Category         Category[]
  Topic            Topic[]
  examsTaken       ExamParticipant[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  Organization     Organization?      @relation(fields: [organizationId], references: [id])
  Exam             Exam[]
  Group            Group[]
  GroupParticipant GroupParticipant[]
  Participant      Participant[]
  GroupExam        GroupExam[]
}

model Organization {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  phone       String
  address     String
  State       String
  Country     String
  CountryCode String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User[]
  Group       Group[]
  Participant Participant[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  adminId   Int?
  admin     User?      @relation(fields: [adminId], references: [id])
  questions Question[]
  topics    Topic[]

  @@unique([name, adminId]) // Composite unique constraint
}

model Topic {
  id         Int        @id @default(autoincrement())
  name       String
  categoryId Int
  adminId    Int?
  category   Category   @relation(fields: [categoryId], references: [id])
  admin      User?      @relation(fields: [adminId], references: [id])
  Question   Question[]

  @@unique([name, categoryId, adminId]) // Composite unique constraint
}

model Question {
  id                Int                @id @default(autoincrement())
  text              String
  categoryId        Int
  topicId           Int
  correctOption     Int
  difficulty        Difficulty         @default(MEDIUM)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  adminId           Int?
  examId            Int?
  updatedBy         Int?
  visibility        Boolean            @default(true)
  category          Category           @relation(fields: [categoryId], references: [id])
  topic             Topic              @relation(fields: [topicId], references: [id])
  options           Option[]
  admin             User?              @relation(fields: [adminId], references: [id])
  responses         Response[]
  Exam              Exam?              @relation(fields: [examId], references: [id])
  QuestionFrequency QuestionFrequency?
  IntResponse       IntResponse[]
}

model Option {
  id         Int     @id @default(autoincrement())
  text       String
  questionId Int
  isCorrect  Boolean @default(false)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionFrequency {
  id         Int @id @default(autoincrement())
  questionId Int @unique
  useFreq    Int @default(0)
  rightFreq  Int @default(0)
  wrongFreq  Int @default(0)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Exam {
  id               Int       @id @default(autoincrement())
  title            String
  description      String
  examCode         String    @unique
  duration         Int
  status           String
  startTime        DateTime? // Optional for unscheduled exams
  endTime          DateTime?
  createdByAdminId Int
  updatedByAdminId Int
  createdById      Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visibility Boolean  @default(true)

  createdBy     User              @relation("AdminCreatedExam", fields: [createdByAdminId], references: [id])
  updatedBy     User              @relation("AdminUpdatedExam", fields: [updatedByAdminId], references: [id])
  createdByUser User              @relation(fields: [createdById], references: [id])
  questions     Question[]
  Response      Response[]
  Result        Result[]
  IntResponse   IntResponse[]
  participants  ExamParticipant[]
  GroupExam     GroupExam[]
}


model ExamParticipant {
  id        Int               @id @default(autoincrement())
  examId    Int
  userId    Int
  startTime DateTime?
  endTime   DateTime?
  status    ParticipantStatus

  exam Exam @relation(fields: [examId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Response {
  id             Int      @id @default(autoincrement())
  userId         Int
  examId         Int
  questionId     Int
  selectedOption Int
  isCorrect      Boolean
  createdAt      DateTime @default(now())

  user     Participant @relation(fields: [userId], references: [id])
  exam     Exam        @relation(fields: [examId], references: [id])
  question Question    @relation(fields: [questionId], references: [id])
}

model IntResponse {
  id         Int      @id @default(autoincrement())
  examId     Int
  questionId Int
  userId     Int
  text       String
  exam       Exam     @relation(fields: [examId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}

model Result {
  id        Int         @id @default(autoincrement())
  userId    Int
  examId    Int
  score     Int
  total     Int
  createdAt DateTime    @default(now())
  user      Participant @relation(fields: [userId], references: [id])
  exam      Exam        @relation(fields: [examId], references: [id])
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)

  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  participants GroupParticipant[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  visibility   Boolean            @default(true)
  GroupExam    GroupExam[]
}

model GroupParticipant {
  id            Int @id @default(autoincrement())
  groupId       Int
  participantId Int

  group Group       @relation(fields: [groupId], references: [id])
  user  Participant @relation(fields: [participantId], references: [id])

  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  visibility Boolean  @default(true)

  @@unique([groupId, participantId])
}

model GroupExam {
  id         Int @id @default(autoincrement())
  groupId    Int
  examId     Int
  assignedBy Int 

  group Group @relation(fields: [groupId], references: [id])
  exam  Exam  @relation(fields: [examId], references: [id])
  admin User  @relation(fields: [assignedBy], references: [id])

  assignedAt DateTime @default(now())

  @@unique([groupId, examId])
}
